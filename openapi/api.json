{
    "openapi": "3.0.2",
    "info": {
        "title": "PizzaShop",
        "version": "1.0.0",
        "description": "<h1>REST API for managing a pizzeria.</h1>\n<br>\n\nThe application includes the management of:\n\n<ul>\n    <li>users (workers and customers)</li>\n    <li>company branches</li>\n    <li>products (variations like doughs, dimensions and toppings, categories)</li>\n    <li>orders (creation, management)</li>\n<ul>",
        "contact": {
            "name": "Fattarsi Gianluca",
            "url": "https://gianlucafattarsi.github.io/",
            "email": "gianluca.fattarsi@gmail.com"
        },
        "license": {
            "name": "MIT License",
            "url": "https://opensource.org/licenses/MIT"
        }
    },
    "servers": [
        {
            "url": "https://virtserver.swaggerhub.com/fattazzo/pizza-shop/1.0.0",
            "description": ""
        }
    ],
    "paths": {
        "/company": {
            "summary": "Path used to manage a single Company.",
            "description": "The REST endpoint/path used to get and update single instances of an `Company`.  This path contains `GET`, and `PUT` operations used to perform the get and update tasks, respectively.",
            "get": {
                "tags": [
                    "companies"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Company"
                                },
                                "examples": {
                                    "example1": {
                                        "value": {
                                            "id": 1,
                                            "name": "Company 1",
                                            "webUrl": "www.company1.com"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns a single `Company`."
                    }
                },
                "operationId": "getCompany",
                "summary": "Get a Company",
                "description": "Gets the details of a single instance of a `Company`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `Company` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Company"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "companies"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Company"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "updateCompany",
                "summary": "Update a Company",
                "description": "Updates an existing `Company`."
            }
        },
        "/branches": {
            "summary": "Path used to manage the list of branches.",
            "description": "The REST endpoint/path used to list and create zero or more `Branch` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "branches"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Branch"
                                    }
                                },
                                "examples": {
                                    "example1": {
                                        "value": [
                                            {
                                                "id": 1,
                                                "phone": "some text",
                                                "webUrl": "some text",
                                                "enabled": true,
                                                "primary": true,
                                                "address": {
                                                    "streetAddress": "via test",
                                                    "number": "1",
                                                    "place": "Trento",
                                                    "postalCode": "38121"
                                                }
                                            },
                                            {
                                                "id": 2,
                                                "phone": "some text",
                                                "webUrl": "some text",
                                                "enabled": true,
                                                "primary": true,
                                                "address": {
                                                    "streetAddress": "via prova",
                                                    "number": "1",
                                                    "place": "Baselga di Pin√®",
                                                    "postalCode": "38042"
                                                }
                                            },
                                            {
                                                "id": 3,
                                                "phone": "some text",
                                                "webUrl": "some text",
                                                "enabled": true,
                                                "primary": true,
                                                "address": {
                                                    "streetAddress": "via Rossi",
                                                    "number": "10/A",
                                                    "place": "Milano",
                                                    "postalCode": "11111"
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `Branch` entities."
                    }
                },
                "operationId": "getBranches",
                "summary": "List All branches of company",
                "description": "Gets a list of all `Branch` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `Branch` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BranchDetails"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "branches"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BranchDetails"
                                }
                            }
                        },
                        "description": "Successful response."
                    },
                    "409": {
                        "description": "Fail primary check on `Branch`. Only one primary branch is permitted."
                    }
                },
                "operationId": "createBranch",
                "summary": "Create a Branch for company",
                "description": "Creates a new instance of a `Branch`."
            }
        },
        "/branches/{branchId}": {
            "summary": "Path used to manage a single Branch.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `Branch`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "branches"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BranchDetails"
                                },
                                "examples": {
                                    "example1": {
                                        "value": {
                                            "id": 1,
                                            "phone": "some text",
                                            "webUrl": "some text",
                                            "shippingMethods": [
                                                {
                                                    "id": 17,
                                                    "title": "some text",
                                                    "description": "some text"
                                                },
                                                {
                                                    "id": 89,
                                                    "title": "some text",
                                                    "description": "some text"
                                                }
                                            ],
                                            "shippingZones": [
                                                {
                                                    "id": 29,
                                                    "name": "some text"
                                                },
                                                {
                                                    "id": 75,
                                                    "name": "some text"
                                                }
                                            ],
                                            "primary": true,
                                            "enabled": true,
                                            "address": {
                                                "streetAddress": "via test",
                                                "number": "1",
                                                "place": "Trento",
                                                "postalCode": "38121"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns a single `Branch`."
                    }
                },
                "operationId": "getBranch",
                "summary": "Get a Branch",
                "description": "Gets the details of a single instance of a `Branch`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `Branch` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BranchDetails"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "branches"
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BranchDetails"
                                }
                            }
                        },
                        "description": "Successful response."
                    },
                    "409": {
                        "description": "Fail primary check on `Branch`. Only one primary branch is permitted."
                    }
                },
                "operationId": "updateBranch",
                "summary": "Update a Branch",
                "description": "Updates an existing `Branch`."
            },
            "delete": {
                "tags": [
                    "branches"
                ],
                "responses": {
                    "204": {
                        "description": "Successful response."
                    }
                },
                "operationId": "deleteBranch",
                "summary": "Delete a Branch",
                "description": "Deletes an existing `Branch`."
            },
            "parameters": [
                {
                    "name": "branchId",
                    "description": "A unique identifier for a `Branch`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/branches/{branchId}/shippingzones": {
            "summary": "Path used to manage the list of shippingzones.",
            "description": "The REST endpoint/path used to list and create zero or more `ShippingZone` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "branches"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ShippingZone"
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `ShippingZone` entities."
                    }
                },
                "operationId": "getShippingZones",
                "summary": "List All shippingzones",
                "description": "Gets a list of all `ShippingZone` entities."
            },
            "parameters": [
                {
                    "name": "branchId",
                    "description": "A unique identifier for a `Branch`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/groups": {
            "summary": "Path used to manage the list of groups.",
            "description": "The REST endpoint/path used to list and create zero or more `Group` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "groups"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Group"
                                    }
                                },
                                "examples": {
                                    "example1": {
                                        "value": [
                                            {
                                                "id": 1,
                                                "name": "Admin",
                                                "roles": [
                                                    "SECURITY_VIEW",
                                                    "SECURITY_EDIT",
                                                    "WEB_ACCESS"
                                                ]
                                            },
                                            {
                                                "id": 13,
                                                "name": "some text",
                                                "roles": [
                                                    "SECURITY_VIEW",
                                                    "WEB_ACCESS"
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `Group` entities."
                    }
                },
                "operationId": "getGroups",
                "summary": "List All groups",
                "description": "Gets a list of all `Group` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `Group` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Group"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "groups"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "createGroup",
                "summary": "Create a Group",
                "description": "Creates a new instance of a `Group`."
            }
        },
        "/groups/{groupId}": {
            "summary": "Path used to manage a single Group.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `Group`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "groups"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        },
                        "description": "Successful response - returns a single `Group`."
                    }
                },
                "operationId": "getGroup",
                "summary": "Get a Group",
                "description": "Gets the details of a single instance of a `Group`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `Group` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Group"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "groups"
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "updateGroup",
                "summary": "Update a Group",
                "description": "Updates an existing `Group`."
            },
            "delete": {
                "tags": [
                    "groups"
                ],
                "responses": {
                    "204": {
                        "description": "Successful response."
                    }
                },
                "operationId": "deleteGroup",
                "summary": "Delete a Group",
                "description": "Deletes an existing `Group`."
            },
            "parameters": [
                {
                    "name": "groupId",
                    "description": "A unique identifier for a `Company`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/shippingmethods/{shippingmethodId}": {
            "summary": "Path used to manage a single ShippingMethod.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `ShippingMethod`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "shippingmethods"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShippingMethod"
                                },
                                "examples": {
                                    "example1": {
                                        "value": {
                                            "id": 3,
                                            "title": "PayPal",
                                            "description": "PayPal transaction",
                                            "type": "PAY_PAL",
                                            "enabled": true
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns a single `ShippingMethod`."
                    }
                },
                "operationId": "getShippingMethod",
                "summary": "Get a ShippingMethod",
                "description": "Gets the details of a single instance of a `ShippingMethod`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `ShippingMethod` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ShippingMethod"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "shippingmethods"
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShippingMethod"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "updateShippingMethod",
                "summary": "Update a ShippingMethod",
                "description": "Updates an existing `ShippingMethod`."
            },
            "delete": {
                "tags": [
                    "shippingmethods"
                ],
                "responses": {
                    "204": {
                        "description": "Successful response."
                    }
                },
                "operationId": "deleteShippingMethod",
                "summary": "Delete a ShippingMethod",
                "description": "Deletes an existing `ShippingMethod`."
            },
            "parameters": [
                {
                    "name": "shippingmethodId",
                    "description": "A unique identifier for a `ShippingMethod`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/users": {
            "summary": "Path used to manage the list of users.",
            "description": "The REST endpoint/path used to list and create zero or more `User` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "users"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                },
                                "examples": {
                                    "example1": {
                                        "value": [
                                            {
                                                "id": 21,
                                                "username": "some text",
                                                "password": "**********",
                                                "email": "some text",
                                                "firstName": "some text",
                                                "lastName": "some text",
                                                "deliveryAddresses": [
                                                    {
                                                        "id": 79,
                                                        "address": {
                                                            "streetAddress": "some text",
                                                            "number": "some text",
                                                            "place": "some text",
                                                            "postalCode": "some text"
                                                        },
                                                        "shippingMethod": {
                                                            "id": 90,
                                                            "title": "some text",
                                                            "description": "some text"
                                                        }
                                                    },
                                                    {
                                                        "id": 82,
                                                        "address": {
                                                            "streetAddress": "some text",
                                                            "number": "some text",
                                                            "place": "some text",
                                                            "postalCode": "some text"
                                                        },
                                                        "shippingMethod": {
                                                            "id": 3,
                                                            "title": "some text",
                                                            "description": "some text"
                                                        }
                                                    }
                                                ],
                                                "groups": [
                                                    {
                                                        "id": 60,
                                                        "name": "some text",
                                                        "roles": [
                                                            "WEB_ACCESS",
                                                            "SECURITY_VIEW"
                                                        ]
                                                    },
                                                    {
                                                        "id": 67,
                                                        "name": "some text",
                                                        "roles": [
                                                            "WEB_ACCESS",
                                                            "SECURITY_EDIT"
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "id": 23,
                                                "username": "some text",
                                                "password": "**********",
                                                "email": "some text",
                                                "firstName": "some text",
                                                "lastName": "some text",
                                                "deliveryAddresses": [
                                                    {
                                                        "id": 77,
                                                        "address": {
                                                            "streetAddress": "some text",
                                                            "number": "some text",
                                                            "place": "some text",
                                                            "postalCode": "some text"
                                                        },
                                                        "shippingMethod": {
                                                            "id": 87,
                                                            "title": "some text",
                                                            "description": "some text"
                                                        }
                                                    },
                                                    {
                                                        "id": 72,
                                                        "address": {
                                                            "streetAddress": "some text",
                                                            "number": "some text",
                                                            "place": "some text",
                                                            "postalCode": "some text"
                                                        },
                                                        "shippingMethod": {
                                                            "id": 53,
                                                            "title": "some text",
                                                            "description": "some text"
                                                        }
                                                    }
                                                ],
                                                "groups": [
                                                    {
                                                        "id": 97,
                                                        "name": "some text",
                                                        "roles": [
                                                            "WEB_ACCESS",
                                                            "WEB_ACCESS"
                                                        ]
                                                    },
                                                    {
                                                        "id": 6,
                                                        "name": "some text",
                                                        "roles": [
                                                            "SECURITY_VIEW",
                                                            "SECURITY_VIEW"
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `User` entities."
                    }
                },
                "operationId": "getUsers",
                "summary": "List All users",
                "description": "Gets a list of all `User` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `User` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserDetails"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "users"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDetails"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "createUser",
                "summary": "Create a User",
                "description": "Creates a new instance of a `User`. Only 'WORKER' type can be created"
            }
        },
        "/users/{userName}": {
            "summary": "Path used to manage a single User.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `User`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "users"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDetails"
                                }
                            }
                        },
                        "description": "Successful response - returns a single `User`."
                    }
                },
                "operationId": "getUser",
                "summary": "Get a User",
                "description": "Gets the details of a single instance of a `User`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `User` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserDetails"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "users"
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDetails"
                                }
                            }
                        },
                        "description": "Successful response."
                    },
                    "400": {
                        "description": "Username cannot change"
                    }
                },
                "operationId": "updateUser",
                "summary": "Update a User",
                "description": "Updates an existing `User`."
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "responses": {
                    "204": {
                        "description": "Successful response."
                    }
                },
                "operationId": "deleteUser",
                "summary": "Delete a User",
                "description": "Deletes an existing `User`."
            },
            "parameters": [
                {
                    "name": "userName",
                    "description": "A unique identifier for a `User`.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/public/session": {
            "summary": "Path used to manage the session operation",
            "post": {
                "requestBody": {
                    "description": "Login user information",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserLogin"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "session"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Session"
                                }
                            }
                        },
                        "description": "Login successfull"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "examples": {
                                    "example": {
                                        "value": {
                                            "error": {
                                                "userTitle": "Unable to access",
                                                "userMessage": "User not active"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "User not active"
                    },
                    "401": {
                        "description": "Username or password not valid"
                    }
                },
                "security": [
                    {

                    }
                ],
                "operationId": "login",
                "summary": "Create a session",
                "description": "Create a `Session` information"
            }
        },
        "/public/session/refresh/{refreshToken}": {
            "summary": "Path used to manage the session operation",
            "post": {
                "tags": [
                    "session"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Session"
                                }
                            }
                        },
                        "description": "New session"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "examples": {
                                    "example": {
                                        "value": {
                                            "error": {
                                                "userTitle": "Refresh Token Expired or Invalid",
                                                "userMessage": "Unable to refresh access token"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Response failed"
                    }
                },
                "security": [
                    {

                    }
                ],
                "operationId": "refreshToken",
                "summary": "Create new session",
                "description": "Create new `Session` with a valid access token"
            },
            "parameters": [
                {
                    "name": "refreshToken",
                    "description": "Refresh token used for retrieve new updated session information",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/company/logo": {
            "summary": "Path used to manage a Company logo image.",
            "description": "The REST endpoint/path used to get and update single instances of an `Company` logo.  This path contains `GET` and `PUT` operations used to perform the get and update tasks, respectively.\n\nCompany logo specification:\nType: PNG\nOptimal shape: square\nOptimal size: 320x320px",
            "get": {
                "tags": [
                    "companies"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "image/png": {
                                "schema": {
                                    "format": "binary",
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Logo image"
                    }
                },
                "security": [
                    {

                    }
                ],
                "operationId": "getLogo",
                "summary": "Company logo",
                "description": "Get a `Company` logo image"
            },
            "put": {
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "format": "binary",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "companies"
                ],
                "responses": {
                    "204": {
                        "description": "Successful response."
                    }
                },
                "operationId": "updateLogo",
                "summary": "Update a Company logo",
                "description": "Updates an existing `Company` logo."
            }
        },
        "/settings/": {
            "summary": "Path used to manage a single Settings.",
            "description": "The REST endpoint/path used to get and update single instances of an `Settings`.  This path contains `GET`, and `PUT` operations used to perform the get and update tasks, respectively.",
            "get": {
                "tags": [
                    "settings"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Settings"
                                },
                                "examples": {
                                    "example1": {
                                        "value": {
                                            "id": 1,
                                            "name": "Company 1",
                                            "webUrl": "www.company1.com"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns a single `Settings`."
                    }
                },
                "operationId": "getSettings",
                "summary": "Get a Settings",
                "description": "Gets the details of a single instance of a `Settings`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `Settings` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Settings"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "settings"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Settings"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "updateSettings",
                "summary": "Update a Settings",
                "description": "Updates an existing `Settings`."
            }
        },
        "/toppingextras": {
            "summary": "Path used to manage the list of toppingextras.",
            "description": "The REST endpoint/path used to list and create zero or more `ToppingExtra` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "toppingextras"
                ],
                "parameters": [
                    {
                        "name": "doughId",
                        "description": "Work with `sizeId` parameter",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "header"
                    },
                    {
                        "name": "sizeId",
                        "description": "Work with `doughId` parameter",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ToppingExtra"
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `ToppingExtra` entities."
                    }
                },
                "operationId": "getToppingExtras",
                "summary": "List All ToppingExtras",
                "description": "Gets a list of all `ToppingExtra` entities."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ToppingExtra"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "toppingextras"
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ToppingExtra"
                                    }
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "updateToppingExtras",
                "summary": "Update All ToppingExtras",
                "description": "Updates existing `ToppingExtra`."
            }
        },
        "/toppingextras/{toppingextraId}": {
            "summary": "Path used to manage a single ToppingExtra.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `ToppingExtra`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "toppingextras"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ToppingExtra"
                                }
                            }
                        },
                        "description": "Successful response - returns a single `ToppingExtra`."
                    }
                },
                "operationId": "getToppingExtra",
                "summary": "Get a ToppingExtra",
                "description": "Gets the details of a single instance of a `ToppingExtra`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `ToppingExtra` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ToppingExtra"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "toppingextras"
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ToppingExtra"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "updateToppingExtra",
                "summary": "Update a ToppingExtra",
                "description": "Updates an existing `ToppingExtra`."
            },
            "parameters": [
                {
                    "name": "toppingextraId",
                    "description": "A unique identifier for a `ToppingExtra`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/dashboard": {
            "summary": "Path used to manage the dashboard.",
            "description": "The REST endpoint/path used to get the `Dashboard` entity.  This path contains a `GET` operation to perform the get task.",
            "get": {
                "tags": [
                    "dashboard"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dashboard"
                                }
                            }
                        },
                        "description": "Successful response - return the `Dashboard` entity."
                    }
                },
                "operationId": "getDashboard",
                "summary": "Get a Dashboard",
                "description": "Gets a `Dashboard`."
            }
        },
        "/public/confirm-registration/{username}": {
            "summary": "Confirm user registration",
            "description": "Confirm user registration with token and change status to 'Active'.",
            "post": {
                "tags": [
                    "registration"
                ],
                "parameters": [
                    {
                        "name": "registrationToken",
                        "description": "Valid token required to confirm registration",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "text/xml": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Successful response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "examples": {
                                    "example": {
                                        "value": {
                                            "error": {
                                                "userTitle": "User confirmation error",
                                                "userMessage": "Registration token required"
                                            }
                                        }
                                    },
                                    "example2": {
                                        "value": {
                                            "error": {
                                                "userTitle": "User confirmation error",
                                                "userMessage": "Activation link expired or already used: request a new activation link"
                                            }
                                        }
                                    },
                                    "example3": {
                                        "value": {
                                            "error": {
                                                "userTitle": "User confirmation error",
                                                "userMessage": "Activation token not valid"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Confirm registration failed"
                    }
                },
                "security": [
                    {

                    }
                ],
                "operationId": "confirmRegistration",
                "summary": "Perform a confirm for a User registration",
                "description": "Complete `User` registration and change status to 'Active'"
            },
            "parameters": [
                {
                    "name": "username",
                    "description": "Username of `User` entity",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/public/registration-customer": {
            "summary": "Customer User registration",
            "description": "The REST endpoint/path used to create zero or more `User` entities. This path contains a `POST` operation to perform the create tasks.",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRegistrationInfo"
                            },
                            "examples": {
                                "example": {
                                    "value": {
                                        "username": "username",
                                        "password": "password",
                                        "firstname": "Name",
                                        "lastname": "Last name",
                                        "email": "username@email.com"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "registration"
                ],
                "responses": {
                    "204": {
                        "description": "Successful response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "examples": {
                                    "example": {
                                        "value": {
                                            "error": {
                                                "userTitle": "User creation failed",
                                                "userMessage": "User already exist"
                                            }
                                        }
                                    },
                                    "example2": {
                                        "value": {
                                            "error": {
                                                "userTitle": "User creation failed",
                                                "userMessage": "Error sending activation email"
                                            }
                                        }
                                    },
                                    "example3": {
                                        "value": {
                                            "error": {
                                                "userTitle": "User creation failed",
                                                "userMessage": "Email already used by another user"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Request failed"
                    }
                },
                "security": [
                    {

                    }
                ],
                "operationId": "createCustomer",
                "summary": "Create a customer User",
                "description": "Create a new instance of `User` with type 'CUSTOMER' and status \"TO_CONFIRM\""
            }
        },
        "/public/resend-confirm-registration-mail": {
            "summary": "Resend email with activation code",
            "description": "The REST endpoint/path used to resend email with activation code to user. This path contains a `POST` operation to perform the tasks.",
            "post": {
                "tags": [
                    "registration"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "description": "username of `User`",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                },
                                "examples": {
                                    "example": {
                                        "value": {
                                            "error": {
                                                "userTitle": "Resend activation mail error",
                                                "userMessage": "The user is already active"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Request failed"
                    }
                },
                "security": [
                    {

                    }
                ],
                "operationId": "resendConfirmRegistrationMail",
                "summary": "Resend email",
                "description": "Resend email with activation code to user"
            }
        },
        "/categories": {
            "summary": "Path used to manage the list of productcategories.",
            "description": "The REST endpoint/path used to list one or more `Category` entities.  This path contains a `GET` operation to perform the list tasks.",
            "get": {
                "tags": [
                    "categories"
                ],
                "parameters": [
                    {
                        "name": "includeDisabled",
                        "description": "If true, the list of all entities include enabled and disabled `Category`",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Category"
                                    }
                                },
                                "examples": {
                                    "example": {
                                        "value": [
                                            {
                                                "id": 79,
                                                "name": "some text",
                                                "description": "some text",
                                                "enabled": true,
                                                "order": 41,
                                                "type": "PIZZA"
                                            },
                                            {
                                                "id": 41,
                                                "name": "some text",
                                                "description": "some text",
                                                "enabled": true,
                                                "order": 10,
                                                "type": "PRODUCT"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `Category` entities."
                    }
                },
                "operationId": "getCategories",
                "summary": "List All categories",
                "description": "Gets a list of all `Category` entities."
            }
        },
        "/pizza/categories": {
            "summary": "Path used to manage the list of pizza categories",
            "description": "The REST endpoint/path used to list and create zero or more `Category` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "pizzacategories"
                ],
                "parameters": [
                    {
                        "name": "includeDisabled",
                        "description": "If true, the list of all entities include enabled and disabled `Category`",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Category"
                                    }
                                },
                                "examples": {
                                    "example": {
                                        "value": [
                                            {
                                                "id": 20,
                                                "name": "some text",
                                                "description": "some text",
                                                "enabled": true,
                                                "order": 1,
                                                "type": "PIZZA"
                                            },
                                            {
                                                "id": 20,
                                                "name": "some text",
                                                "description": "some text",
                                                "enabled": true,
                                                "order": 2,
                                                "type": "PIZZA"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `Category` entities."
                    }
                },
                "operationId": "getPizzaCategories",
                "summary": "List All pizza categories",
                "description": "Gets a list of all pizza `Category` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new pizza `Category` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryDetails"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "pizzacategories"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryDetails"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "createPizzaCategory",
                "summary": "Create a pizza Category",
                "description": "Creates a new instance of a pizza `Category`."
            }
        },
        "/pizza/categories/{categoryId}": {
            "summary": "Path used to manage a single pizza Category.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `Category`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "pizzacategories"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryDetails"
                                }
                            }
                        },
                        "description": "Successful response - returns a single `Category`."
                    }
                },
                "operationId": "getPizzaCategory",
                "summary": "Get a pizza Category",
                "description": "Gets the details of a single instance of a pizza `Category`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `Category` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryDetails"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "pizzacategories"
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryDetails"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "updatePizzaCategory",
                "summary": "Update a pizza Category",
                "description": "Updates an existing pizza `Category`."
            },
            "delete": {
                "tags": [
                    "pizzacategories"
                ],
                "responses": {
                    "204": {
                        "description": "Successful response."
                    }
                },
                "operationId": "deletePizzaCategory",
                "summary": "Delete a pizza Category",
                "description": "Deletes an existing pizza `Category`."
            },
            "parameters": [
                {
                    "name": "categoryId",
                    "description": "A unique identifier for a `Category`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/pizza/variations/doughs": {
            "summary": "Path used to manage the list of doughs.",
            "description": "The REST endpoint/path used to list and create zero or more `Dough` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "pizzavariations"
                ],
                "parameters": [
                    {
                        "name": "includeDisabled",
                        "description": "If true, the list of all entities include enabled and disabled `Dough`",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/VariationDough"
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `Dough` entities."
                    }
                },
                "operationId": "getDoughs",
                "summary": "List All doughs",
                "description": "Gets a list of all `Dough` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `Dough` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VariationDough"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "pizzavariations"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VariationDough"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "createDough",
                "summary": "Create a Dough",
                "description": "Creates a new instance of a `Dough`."
            }
        },
        "/pizza/variations/doughs/{doughId}": {
            "summary": "Path used to manage a single Dough.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `Dough`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "pizzavariations"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VariationDough"
                                }
                            }
                        },
                        "description": "Successful response - returns a single `Dough`."
                    }
                },
                "operationId": "getDough",
                "summary": "Get a Dough",
                "description": "Gets the details of a single instance of a `Dough`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `Dough` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VariationDough"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "pizzavariations"
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VariationDough"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "updateDough",
                "summary": "Update a Dough",
                "description": "Updates an existing `Dough`."
            },
            "delete": {
                "tags": [
                    "pizzavariations"
                ],
                "responses": {
                    "204": {
                        "description": "Successful response."
                    }
                },
                "operationId": "deleteDough",
                "summary": "Delete a Dough",
                "description": "Deletes an existing `Dough`."
            },
            "parameters": [
                {
                    "name": "doughId",
                    "description": "A unique identifier for a `Dough`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/pizza/variations/sizes": {
            "summary": "Path used to manage the list of sizes.",
            "description": "The REST endpoint/path used to list and create zero or more `Size` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "pizzavariations"
                ],
                "parameters": [
                    {
                        "name": "includeDisabled",
                        "description": "If true, the list of all entities include enabled and disabled `Size`",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/VariationSize"
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `Size` entities."
                    }
                },
                "operationId": "getSizes",
                "summary": "List All sizes",
                "description": "Gets a list of all `Size` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `Size` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VariationSize"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "pizzavariations"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VariationSize"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "createSize",
                "summary": "Create a Size",
                "description": "Creates a new instance of a `Size`."
            }
        },
        "/pizza/variations/sizes/{sizeId}": {
            "summary": "Path used to manage a single Size.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `Size`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "pizzavariations"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VariationSize"
                                }
                            }
                        },
                        "description": "Successful response - returns a single `Size`."
                    }
                },
                "operationId": "getSize",
                "summary": "Get a Size",
                "description": "Gets the details of a single instance of a `Size`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `Size` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VariationSize"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "pizzavariations"
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VariationSize"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "updateSize",
                "summary": "Update a Size",
                "description": "Updates an existing `Size`."
            },
            "delete": {
                "tags": [
                    "pizzavariations"
                ],
                "responses": {
                    "204": {
                        "description": "Successful response."
                    }
                },
                "operationId": "deleteSize",
                "summary": "Delete a Size",
                "description": "Deletes an existing `Size`."
            },
            "parameters": [
                {
                    "name": "sizeId",
                    "description": "A unique identifier for a `Size`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/pizza/variations/toppings": {
            "summary": "Path used to manage the list of toppings.",
            "description": "The REST endpoint/path used to list and create zero or more `Topping` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "pizzavariations"
                ],
                "parameters": [
                    {
                        "name": "includeDisabled",
                        "description": "If true, the list of all entities include enabled and disabled `Topping`",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Topping"
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `Topping` entities."
                    }
                },
                "operationId": "getToppings",
                "summary": "List All toppings",
                "description": "Gets a list of all `Topping` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `Topping` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Topping"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "pizzavariations"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Topping"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "createTopping",
                "summary": "Create a Topping",
                "description": "Creates a new instance of a `Topping`."
            }
        },
        "/pizza/variations/toppings/{toppingId}": {
            "summary": "Path used to manage a single Topping.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `Topping`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "pizzavariations"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Topping"
                                }
                            }
                        },
                        "description": "Successful response - returns a single `Topping`."
                    }
                },
                "operationId": "getTopping",
                "summary": "Get a Topping",
                "description": "Gets the details of a single instance of a `Topping`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `Topping` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Topping"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "pizzavariations"
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Topping"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "updateTopping",
                "summary": "Update a Topping",
                "description": "Updates an existing `Topping`."
            },
            "delete": {
                "tags": [
                    "pizzavariations"
                ],
                "responses": {
                    "204": {
                        "description": "Successful response."
                    }
                },
                "operationId": "deleteTopping",
                "summary": "Delete a Topping",
                "description": "Deletes an existing `Topping`."
            },
            "parameters": [
                {
                    "name": "toppingId",
                    "description": "A unique identifier for a `Topping`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/product/variations": {
            "summary": "Path used to manage the list of variationproducts.",
            "description": "The REST endpoint/path used to list and create zero or more `VariationProduct` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "productvariations"
                ],
                "parameters": [
                    {
                        "name": "includeDisabled",
                        "description": "If true, the list of all entities include enabled and disabled `VariationProduct`",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/VariationProduct"
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `VariationProduct` entities."
                    }
                },
                "operationId": "getVariationProducts",
                "summary": "List All VariationProducts",
                "description": "Gets a list of all `VariationProduct` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `VariationProduct` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VariationProduct"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "productvariations"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VariationProduct"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "createVariationProduct",
                "summary": "Create a VariationProduct",
                "description": "Creates a new instance of a `VariationProduct`."
            }
        },
        "/product/variations/{variationId}": {
            "summary": "Path used to manage a single VariationProduct.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `VariationProduct`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "productvariations"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VariationProduct"
                                }
                            }
                        },
                        "description": "Successful response - returns a single `VariationProduct`."
                    }
                },
                "operationId": "getVariationProduct",
                "summary": "Get a VariationProduct",
                "description": "Gets the details of a single instance of a `VariationProduct`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `VariationProduct` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VariationProduct"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "productvariations"
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VariationProduct"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "updateVariationProduct",
                "summary": "Update a VariationProduct",
                "description": "Updates an existing `VariationProduct`."
            },
            "delete": {
                "tags": [
                    "productvariations"
                ],
                "responses": {
                    "204": {
                        "description": "Successful response."
                    }
                },
                "operationId": "deleteVariationProduct",
                "summary": "Delete a VariationProduct",
                "description": "Deletes an existing `VariationProduct`."
            },
            "parameters": [
                {
                    "name": "variationId",
                    "description": "A unique identifier for a `VariationProduct`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/product/items": {
            "summary": "Path used to manage the list of itemproducts.",
            "description": "The REST endpoint/path used to list and create zero or more `ItemProduct` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "includeDisabled",
                        "description": "If true, the list of all entities include enabled and disabled `Product`",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "header"
                    },
                    {
                        "name": "categoryId",
                        "description": "Filter all products by the category if present",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Item"
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `Item` entities."
                    }
                },
                "operationId": "getItemProducts",
                "summary": "List All ItemProduct",
                "description": "Gets a list of all `ItemProduct` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `ItemProduct` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemProduct"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "products"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemProduct"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "createItemProduct",
                "summary": "Create a ItemProduct",
                "description": "Creates a new instance of a `ItemProduct`."
            }
        },
        "/pizza/items": {
            "summary": "Path used to manage the list of itempizzas.",
            "description": "The REST endpoint/path used to list and create zero or more `ItemPizza` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "pizzas"
                ],
                "parameters": [
                    {
                        "name": "includeDisabled",
                        "description": "If true, the list of all entities include enabled and disabled `Product`",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "header"
                    },
                    {
                        "name": "categoryId",
                        "description": "Filter all products by the category if present",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Item"
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `Item` entities."
                    }
                },
                "operationId": "getItemPizzas",
                "summary": "List All ItemPizzas",
                "description": "Gets a list of all `ItemPizza` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `ItemPizza` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemPizza"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "pizzas"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemPizza"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "createItemPizza",
                "summary": "Create a ItemPizza",
                "description": "Creates a new instance of a `ItemPizza`."
            }
        },
        "/product/items/{itemId}/image": {
            "summary": "Path used to manage a Product image.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `ItemProduct` image.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "products"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "image/png": {
                                "schema": {
                                    "format": "binary",
                                    "type": "string"
                                }
                            }
                        },
                        "description": "`ItemProduct` image"
                    },
                    "204": {
                        "description": "`ItemProduct` image not present"
                    }
                },
                "security": [
                    {

                    }
                ],
                "operationId": "getItemProductImage",
                "summary": "Get a ItemProduct image",
                "description": "Gets a `ItemProduct` image."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "format": "binary",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "products"
                ],
                "responses": {
                    "204": {
                        "description": "Successful response"
                    }
                },
                "operationId": "updateItemProductImage",
                "summary": "Update a ItemProduct image",
                "description": "Updates an existing `ItemProduct` image."
            },
            "delete": {
                "tags": [
                    "products"
                ],
                "responses": {
                    "204": {
                        "description": "Successful response."
                    }
                },
                "operationId": "deleteItemProductImage",
                "summary": "Delete a ItemProduct image",
                "description": "Deletes an existing `ItemProduct` image."
            },
            "parameters": [
                {
                    "name": "itemId",
                    "description": "A unique identifier for a `ItemProduct`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/pizza/items/{itemId}/image": {
            "summary": "Path used to manage a Product image.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `Product` image.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "pizzas"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "image/png": {
                                "schema": {
                                    "format": "binary",
                                    "type": "string"
                                }
                            }
                        },
                        "description": "`ItemPizza` image"
                    },
                    "204": {
                        "description": "`ItemPizza` image not present"
                    }
                },
                "security": [
                    {

                    }
                ],
                "operationId": "getItemPizzaImage",
                "summary": "Get a ItemPizza image",
                "description": "Gets a `ItemPizza` image."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "format": "binary",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "pizzas"
                ],
                "responses": {
                    "204": {
                        "description": "Successful response"
                    }
                },
                "operationId": "updateItemPizzaImage",
                "summary": "Update a ItemPizza image",
                "description": "Updates an existing `ItemPizza` image."
            },
            "delete": {
                "tags": [
                    "pizzas"
                ],
                "responses": {
                    "204": {
                        "description": "Successful response."
                    }
                },
                "operationId": "deleteItemPizzaImage",
                "summary": "Delete a ItemPizza image",
                "description": "Deletes an existing `ItemPizza` image."
            },
            "parameters": [
                {
                    "name": "itemId",
                    "description": "A unique identifier for a `ItemPizza`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/pizza/items/{itemId}": {
            "summary": "Path used to manage a single ItemPizza.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `ItemPizza`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "pizzas"
                ],
                "parameters": [
                    {
                        "name": "includeInvalidPrices",
                        "description": "Include prices from disabled categories and prices equal to zero",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemPizza"
                                }
                            }
                        },
                        "description": "Successful response - returns a single `ItemPizza`."
                    }
                },
                "operationId": "getItemPizza",
                "summary": "Get a ItemPizza",
                "description": "Gets the details of a single instance of a `ItemPizza`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `ItemPizza` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemPizza"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "pizzas"
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemPizza"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "updateItemPizza",
                "summary": "Update a ItemPizza",
                "description": "Updates an existing `ItemPizza`."
            },
            "delete": {
                "tags": [
                    "pizzas"
                ],
                "responses": {
                    "204": {
                        "description": "Successful response."
                    }
                },
                "operationId": "deleteItemPizza",
                "summary": "Delete a ItemPizza",
                "description": "Deletes an existing `ItemPizza`."
            },
            "parameters": [
                {
                    "name": "itemId",
                    "description": "A unique identifier for a `ItemPizza`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/product/categories/": {
            "summary": "Path used to manage the list of product categories",
            "description": "The REST endpoint/path used to list and create zero or more `Category` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "productcategories"
                ],
                "parameters": [
                    {
                        "name": "includeDisabled",
                        "description": "If true, the list of all entities include enabled and disabled `Category`",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Category"
                                    }
                                },
                                "examples": {
                                    "example": {
                                        "value": [
                                            {
                                                "id": 20,
                                                "name": "some text",
                                                "description": "some text",
                                                "enabled": true,
                                                "order": 1,
                                                "type": "PIZZA"
                                            },
                                            {
                                                "id": 20,
                                                "name": "some text",
                                                "description": "some text",
                                                "enabled": true,
                                                "order": 2,
                                                "type": "PIZZA"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `Category` entities."
                    }
                },
                "operationId": "getProductCategories",
                "summary": "List All product categories",
                "description": "Gets a list of all product `Category` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new product `Category` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Category"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "productcategories"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "createProductCategory",
                "summary": "Create a product Category",
                "description": "Creates a new instance of a product `Category`."
            }
        },
        "/product/categories/{categoryId}/": {
            "summary": "Path used to manage a single product Category.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `Category`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "productcategories"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        },
                        "description": "Successful response - returns a single `Category`."
                    }
                },
                "operationId": "getProductCategory",
                "summary": "Get a product Category",
                "description": "Gets the details of a single instance of a product `Category`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `Category` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Category"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "productcategories"
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "updateProductCategory",
                "summary": "Update a product Category",
                "description": "Updates an existing product `Category`."
            },
            "delete": {
                "tags": [
                    "productcategories"
                ],
                "responses": {
                    "204": {
                        "description": "Successful response."
                    }
                },
                "operationId": "deleteProductCategory",
                "summary": "Delete a product Category",
                "description": "Deletes an existing product `Category`."
            },
            "parameters": [
                {
                    "name": "categoryId",
                    "description": "A unique identifier for a `Category`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/product/items/{itemId}": {
            "summary": "Path used to manage a single Product.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `Product`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "products"
                ],
                "parameters": [
                    {
                        "name": "includeInvalidPrices",
                        "description": "Include prices from disabled categories and prices equal to zero",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemProduct"
                                }
                            }
                        },
                        "description": "Successful response - returns a single `ItemProduct`."
                    }
                },
                "operationId": "getItemProduct",
                "summary": "Get a ItemProduct",
                "description": "Gets the details of a single instance of a `ItemProduct`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `ItemProduct` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemProduct"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "products"
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemProduct"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "updateItemProduct",
                "summary": "Update a ItemProduct",
                "description": "Updates an existing `ItemProduct`."
            },
            "delete": {
                "tags": [
                    "products"
                ],
                "responses": {
                    "204": {
                        "description": "Successful response."
                    }
                },
                "operationId": "deleteItemProduct",
                "summary": "Delete a ItemProduct",
                "description": "Deletes an existing `ItemProduct`."
            },
            "parameters": [
                {
                    "name": "itemId",
                    "description": "A unique identifier for a `ItemProduct`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/orders": {
            "summary": "Path used to manage the list of orders.",
            "description": "The REST endpoint/path used to list and create zero or more `Order` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "post": {
                "requestBody": {
                    "description": "A new `Order` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrderRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "orders"
                ],
                "responses": {
                    "201": {
                        "description": "Successful response."
                    }
                },
                "operationId": "createOrder",
                "summary": "Create a Order",
                "description": "Creates a new instance of a `Order`."
            }
        },
        "/orders/{orderId}": {
            "summary": "Path used to manage a single Order.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `Order`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "orders"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderDetails"
                                }
                            }
                        },
                        "description": "Successful response - returns a single `OrderDetails`."
                    }
                },
                "operationId": "getOrder",
                "summary": "Get a Order",
                "description": "Gets the details of a single instance of a `OrderDetails`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `OrderDetails` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrderDetails"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "orders"
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderDetails"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "updateOrder",
                "summary": "Update a Order",
                "description": "Updates an existing `OrderDetails`."
            },
            "delete": {
                "tags": [
                    "orders"
                ],
                "responses": {
                    "204": {
                        "description": "Successful response."
                    }
                },
                "operationId": "deleteOrder",
                "summary": "Delete a Order",
                "description": "Deletes an existing `Order`."
            },
            "parameters": [
                {
                    "name": "orderId",
                    "description": "A unique identifier for a `Order`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/orders/{orderId}/lines": {
            "summary": "Path used to manage the list of orderlines.",
            "description": "The REST endpoint/path used to list and create zero or more `OrderLine` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "orderslines"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OrderLine"
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `OrderLine` entities."
                    }
                },
                "operationId": "getOrderLines",
                "summary": "List All OrderLines",
                "description": "Gets a list of all `OrderLine` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `OrderLine` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrderLine"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "orderslines"
                ],
                "responses": {
                    "201": {
                        "description": "Successful response."
                    }
                },
                "operationId": "createOrderLine",
                "summary": "Create a OrderLine",
                "description": "Creates a new instance of a `OrderLine`."
            },
            "parameters": [
                {
                    "name": "orderId",
                    "description": "A unique identifier for a `Order`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/orders/{orderId}/lines/{orderlineId}": {
            "summary": "Path used to manage a single OrderLine.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `OrderLine`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "orderslines"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderLine"
                                }
                            }
                        },
                        "description": "Successful response - returns a single `OrderLine`."
                    }
                },
                "operationId": "getOrderLine",
                "summary": "Get a OrderLine",
                "description": "Gets the details of a single instance of a `OrderLine`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `OrderLine` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrderLine"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "orderslines"
                ],
                "responses": {
                    "202": {
                        "description": "Successful response."
                    }
                },
                "operationId": "updateOrderLine",
                "summary": "Update a OrderLine",
                "description": "Updates an existing `OrderLine`."
            },
            "delete": {
                "tags": [
                    "orderslines"
                ],
                "responses": {
                    "204": {
                        "description": "Successful response."
                    }
                },
                "operationId": "deleteOrderLine",
                "summary": "Delete a OrderLine",
                "description": "Deletes an existing `OrderLine`."
            },
            "parameters": [
                {
                    "name": "orderId",
                    "description": "A unique identifier for a `Order`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "orderlineId",
                    "description": "A unique identifier for a `OrderLine`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/shippingmethods": {
            "summary": "Path used to manage the list of shippingmethods.",
            "description": "The REST endpoint/path used to list and create zero or more `ShippingMethod` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "shippingmethods"
                ],
                "parameters": [
                    {
                        "name": "includeDisabled",
                        "description": "If true, the list of all entities include enabled and disabled `Size`",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ShippingMethod"
                                    }
                                },
                                "examples": {
                                    "example1": {
                                        "value": [
                                            {
                                                "id": 1,
                                                "title": "Cash on delivery",
                                                "description": "Paying for goods when they are delivered.",
                                                "type": "CASH_ON_DELIVERY",
                                                "enabled": true
                                            },
                                            {
                                                "id": 2,
                                                "title": "Air mail",
                                                "description": "Fast and Furious!",
                                                "type": "CASH_ON_DELIVERY",
                                                "enabled": true
                                            },
                                            {
                                                "id": 3,
                                                "title": "PayPal",
                                                "description": "PayPal transaction",
                                                "type": "PAY_PAL",
                                                "enabled": true
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `ShippingMethod` entities."
                    }
                },
                "operationId": "getShippingMethods",
                "summary": "List All shippingmethods",
                "description": "Gets a list of all `ShippingMethod` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `ShippingMethod` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ShippingMethod"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "shippingmethods"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShippingMethod"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "operationId": "createShippingMethod",
                "summary": "Create a ShippingMethod",
                "description": "Creates a new instance of a `ShippingMethod`."
            }
        },
        "/orders/search": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrderSearchParameters"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "orders"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OrderSearchResult"
                                    }
                                }
                            }
                        },
                        "description": "List of `Order` entities"
                    }
                },
                "operationId": "searchOrders"
            }
        },
        "/public/session/social": {
            "summary": "Path used to manage the session operation",
            "post": {
                "requestBody": {
                    "description": "Login user information",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserSocialLogin"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "session"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Session"
                                }
                            }
                        },
                        "description": "Login successfull"
                    },
                    "401": {
                        "description": "Login data not valid"
                    }
                },
                "security": [
                    {

                    }
                ],
                "operationId": "loginSocial",
                "summary": "Create a session",
                "description": "Create a `Session` information"
            }
        }
    },
    "components": {
        "schemas": {
            "Company": {
                "description": "",
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Unique identifier",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Company name",
                        "type": "string"
                    },
                    "webUrl": {
                        "description": "Company web url",
                        "type": "string"
                    },
                    "logoUrl": {
                        "description": "Url of `Company` logo",
                        "type": "string"
                    }
                },
                "example": {
                    "id": 1,
                    "name": "PizzaShop",
                    "webUrl": "wwww.pizzashop.example",
                    "enabled": true
                }
            },
            "Address": {
                "description": "",
                "required": [
                    "streetAddress",
                    "place"
                ],
                "type": "object",
                "properties": {
                    "streetAddress": {
                        "description": "",
                        "type": "string"
                    },
                    "number": {
                        "description": "",
                        "type": "string"
                    },
                    "place": {
                        "description": "",
                        "type": "string"
                    },
                    "postalCode": {
                        "description": "",
                        "type": "string"
                    }
                },
                "example": {
                    "streetAddress": "via test",
                    "number": "1A",
                    "place": "Trento",
                    "postalCode": "38121"
                }
            },
            "DeliveryAddress": {
                "description": "",
                "required": [
                    "streetAddress"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "",
                        "type": "integer"
                    },
                    "address": {
                        "$ref": "#/components/schemas/Address",
                        "description": ""
                    },
                    "shippingMethod": {
                        "$ref": "#/components/schemas/ShippingMethod",
                        "description": ""
                    }
                },
                "example": {
                    "id": 1,
                    "address": {
                        "streetAddress": "via test",
                        "number": "1A",
                        "place": "Trento",
                        "postalCode": "38121"
                    },
                    "shippingMethod": {
                        "id": 56,
                        "title": "some text",
                        "description": "some text"
                    }
                }
            },
            "Group": {
                "description": "",
                "required": [
                    "name",
                    "readOnly"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Unique identifier",
                        "type": "integer"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "roles": {
                        "description": "List of assigned `Role'",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Role"
                        }
                    },
                    "readOnly": {
                        "description": "Read only groups cannot be deleted",
                        "type": "boolean"
                    }
                },
                "example": {
                    "id": 1,
                    "name": "Admin",
                    "readOnly": true,
                    "roles": [
                        "WEB_ACCESS",
                        "SECURITY_EDIT",
                        "SECURITY_VIEW"
                    ]
                }
            },
            "Role": {
                "description": "",
                "enum": [
                    "WEB_ADMIN",
                    "SECURITY",
                    "SHIPPING_METHODS",
                    "COMPANY",
                    "EDIT_ACCOUNT",
                    "VARIATIONS",
                    "PRODUCTS",
                    "ORDERS",
                    "CREATE_ORDER",
                    "PROCESS_ORDER"
                ],
                "type": "string"
            },
            "Branch": {
                "description": "",
                "required": [
                    "shippingMethods",
                    "primary",
                    "address",
                    "enabled"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Unique identifier",
                        "type": "integer"
                    },
                    "phone": {
                        "description": "",
                        "type": "string"
                    },
                    "webUrl": {
                        "description": "Web site url",
                        "type": "string"
                    },
                    "primary": {
                        "description": "",
                        "type": "boolean"
                    },
                    "address": {
                        "$ref": "#/components/schemas/Address",
                        "description": ""
                    },
                    "enabled": {
                        "description": "",
                        "type": "boolean"
                    }
                },
                "example": {
                    "id": 1,
                    "phone": "XXX XXXXXXX",
                    "webUrl": "www.pizzashop.example/branch1",
                    "primary": true,
                    "enabled": true,
                    "address": {
                        "streetAddress": "some text",
                        "number": "some text",
                        "place": "some text",
                        "postalCode": "some text"
                    }
                }
            },
            "BranchDetails": {
                "description": "",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Branch"
                    },
                    {
                        "required": [
                            "shippingMethods"
                        ],
                        "type": "object",
                        "properties": {
                            "shippingMethods": {
                                "description": "List of available `ShippingMethod`",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ShippingMethod"
                                }
                            },
                            "shippingZones": {
                                "description": "List of available `ShippingZone`",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ShippingZone"
                                }
                            }
                        }
                    }
                ],
                "example": {
                    "id": 1,
                    "phone": "XXX XXXXXXX",
                    "webUrl": "www.pizzashop.example/branch1",
                    "shippingMethods": [
                        {
                            "id": "flat_rate",
                            "title": "Flat rate",
                            "description": "Lets you charge a fixed rate for shipping."
                        }
                    ],
                    "shippingZones": [
                        {
                            "id": 0,
                            "name": "Zone 1"
                        },
                        {
                            "id": 0,
                            "name": "Zone 2"
                        }
                    ],
                    "primary": true
                }
            },
            "ShippingMethodType": {
                "description": "",
                "enum": [
                    "PAY_PAL",
                    "CASH"
                ],
                "type": "string"
            },
            "User": {
                "description": "",
                "required": [
                    "username",
                    "password",
                    "readOnly",
                    "type",
                    "status",
                    "socialType"
                ],
                "type": "object",
                "properties": {
                    "username": {
                        "description": "Login name",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email address",
                        "type": "string"
                    },
                    "readOnly": {
                        "description": "Read only users cannot be deleted",
                        "type": "boolean"
                    },
                    "type": {
                        "$ref": "#/components/schemas/UserType",
                        "description": "Type of user"
                    },
                    "status": {
                        "$ref": "#/components/schemas/UserStatus",
                        "description": "Status of the `User`"
                    },
                    "socialType": {
                        "$ref": "#/components/schemas/SocialTypeEnum",
                        "description": ""
                    }
                },
                "example": {
                    "username": "some text",
                    "email": "some text",
                    "readOnly": true,
                    "type": "WORKER"
                }
            },
            "UserDetails": {
                "description": "",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/User"
                    },
                    {
                        "required": [
                            "groups"
                        ],
                        "type": "object",
                        "properties": {
                            "password": {
                                "format": "password",
                                "description": "Login password",
                                "type": "string"
                            },
                            "firstName": {
                                "description": "First name",
                                "type": "string"
                            },
                            "lastName": {
                                "description": "Last name",
                                "type": "string"
                            },
                            "groups": {
                                "description": "List of assigned `Group`",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            },
                            "deliveryAddresses": {
                                "description": "List of delivery address",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/DeliveryAddress"
                                }
                            }
                        }
                    }
                ],
                "example": {
                    "username": "some text",
                    "password": "**********",
                    "email": "some text",
                    "firstName": "some text",
                    "lastName": "some text",
                    "type": "WORKER",
                    "deliveryAddresses": [
                        {
                            "id": 17,
                            "address": {
                                "streetAddress": "via Di Bugno",
                                "number": "12",
                                "place": "Baselga di Pin√®",
                                "postalCode": "38042"
                            },
                            "shippingMethod": {
                                "id": 1,
                                "title": "Flat rate",
                                "description": "Lets you charge a fixed rate for shipping."
                            }
                        },
                        {
                            "id": 92,
                            "address": {
                                "streetAddress": "via Galilei",
                                "number": "4/A",
                                "place": "Milano",
                                "postalCode": "11111"
                            },
                            "shippingMethod": {
                                "id": 2,
                                "title": "Air mail",
                                "description": "Fast and Furious!"
                            }
                        }
                    ],
                    "groups": [
                        {
                            "id": 1,
                            "name": "Admin",
                            "roles": [
                                "SECURITY_VIEW",
                                "SECURITY_EDIT",
                                "WEB_ADMIN"
                            ]
                        }
                    ]
                }
            },
            "UserType": {
                "description": "",
                "enum": [
                    "ADMIN",
                    "WORKER",
                    "CUSTOMER"
                ],
                "type": "string"
            },
            "Session": {
                "description": "",
                "required": [
                    "userInfo"
                ],
                "type": "object",
                "properties": {
                    "userInfo": {
                        "$ref": "#/components/schemas/User",
                        "description": ""
                    },
                    "locale": {
                        "description": "",
                        "type": "string"
                    },
                    "enviroment": {
                        "description": "",
                        "type": "string"
                    },
                    "accessToken": {
                        "description": "",
                        "type": "string"
                    },
                    "refreshToken": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "UserLogin": {
                "description": "",
                "required": [
                    "username",
                    "password"
                ],
                "type": "object",
                "properties": {
                    "username": {
                        "description": "",
                        "type": "string"
                    },
                    "password": {
                        "description": "",
                        "type": "string"
                    },
                    "locale": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "UserStatus": {
                "description": "",
                "enum": [
                    "Active",
                    "ToConfirm"
                ],
                "type": "string"
            },
            "Topping": {
                "description": "Any ingredient that can be added extra to the standard pizza",
                "required": [
                    "name",
                    "enabled"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "",
                        "type": "integer"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "description": {
                        "description": "",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "",
                        "type": "boolean"
                    }
                }
            },
            "ToppingExtra": {
                "description": "Price of the topping based on a dough and size",
                "required": [
                    "dough",
                    "extra",
                    "variationSize",
                    "topping",
                    "enabled"
                ],
                "properties": {
                    "id": {
                        "description": "",
                        "type": "integer"
                    },
                    "topping": {
                        "$ref": "#/components/schemas/Topping",
                        "description": ""
                    },
                    "dough": {
                        "$ref": "#/components/schemas/VariationDough",
                        "description": ""
                    },
                    "extra": {
                        "description": "",
                        "type": "number"
                    },
                    "enabled": {
                        "description": "",
                        "type": "boolean"
                    },
                    "variationSize": {
                        "$ref": "#/components/schemas/VariationSize",
                        "description": ""
                    }
                }
            },
            "Dashboard": {
                "description": "",
                "required": [
                    "customers",
                    "pizzas"
                ],
                "type": "object",
                "properties": {
                    "customers": {
                        "$ref": "#/components/schemas/DashboardCustomers",
                        "description": ""
                    },
                    "pizzas": {
                        "$ref": "#/components/schemas/DashBoardPizzas",
                        "description": ""
                    }
                }
            },
            "DashboardCustomers": {
                "description": "",
                "required": [
                    "total",
                    "toConfirm"
                ],
                "type": "object",
                "properties": {
                    "total": {
                        "description": "Total user of type 'Customer'",
                        "type": "integer"
                    },
                    "toConfirm": {
                        "description": "Number of 'Customer' users who need to confirm registration",
                        "type": "integer"
                    }
                }
            },
            "ErrorData": {
                "description": "",
                "required": [
                    "userMessage",
                    "userTitle"
                ],
                "type": "object",
                "properties": {
                    "userTitle": {
                        "description": "",
                        "type": "string"
                    },
                    "userMessage": {
                        "description": "",
                        "type": "string"
                    },
                    "internal": {
                        "$ref": "#/components/schemas/ErrorInternal",
                        "description": ""
                    },
                    "constraintErrors": {
                        "description": "",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConstraintError"
                        }
                    }
                }
            },
            "ErrorInternal": {
                "description": "",
                "required": [
                    "exception"
                ],
                "type": "object",
                "properties": {
                    "exception": {
                        "description": "",
                        "type": "string"
                    },
                    "stack": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "ConstraintError": {
                "description": "",
                "type": "object",
                "properties": {
                    "fieldName": {
                        "description": "",
                        "type": "string"
                    },
                    "constraintsNotRespected": {
                        "description": "",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ErrorResponse": {
                "description": "",
                "required": [
                    "error"
                ],
                "type": "object",
                "properties": {
                    "error": {
                        "$ref": "#/components/schemas/ErrorData",
                        "description": ""
                    }
                }
            },
            "VariationSize": {
                "description": "",
                "required": [
                    "name",
                    "enabled"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "",
                        "type": "integer"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "description": {
                        "description": "",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "",
                        "type": "boolean"
                    },
                    "order": {
                        "description": "",
                        "type": "integer"
                    }
                }
            },
            "VariationDough": {
                "description": "",
                "required": [
                    "name",
                    "extra",
                    "enabled"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Unique identifier",
                        "type": "integer"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "description": {
                        "description": "",
                        "type": "string"
                    },
                    "extra": {
                        "description": "",
                        "type": "number"
                    },
                    "enabled": {
                        "description": "",
                        "type": "boolean"
                    },
                    "order": {
                        "description": "",
                        "type": "integer"
                    }
                }
            },
            "UserRegistrationInfo": {
                "description": "",
                "required": [
                    "username",
                    "email"
                ],
                "type": "object",
                "properties": {
                    "username": {
                        "description": "",
                        "type": "string"
                    },
                    "password": {
                        "description": "",
                        "maxLength": 30,
                        "minLength": 5,
                        "type": "string"
                    },
                    "firstname": {
                        "description": "",
                        "type": "string"
                    },
                    "lastname": {
                        "description": "",
                        "type": "string"
                    },
                    "email": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "Category": {
                "description": "",
                "required": [
                    "name",
                    "enabled",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Unique identifier",
                        "type": "integer"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "description": {
                        "description": "",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "",
                        "type": "boolean"
                    },
                    "order": {
                        "description": "",
                        "type": "integer"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ItemType",
                        "description": ""
                    }
                }
            },
            "CategoryDetails": {
                "description": "",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Category"
                    }
                ],
                "properties": {
                    "doughs": {
                        "description": "",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariationDough"
                        }
                    },
                    "sizes": {
                        "description": "",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariationSize"
                        }
                    }
                }
            },
            "Item": {
                "description": "",
                "required": [
                    "name",
                    "enabled",
                    "category"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Unique identifier",
                        "type": "integer"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "description": {
                        "description": "",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "",
                        "type": "boolean"
                    },
                    "category": {
                        "$ref": "#/components/schemas/Category",
                        "description": ""
                    },
                    "imageUrl": {
                        "description": "",
                        "type": "string"
                    },
                    "availablePrices": {
                        "description": "",
                        "type": "array",
                        "items": {
                            "type": "number"
                        },
                        "readOnly": true
                    }
                }
            },
            "ItemType": {
                "description": "",
                "enum": [
                    "PIZZA",
                    "PRODUCT"
                ],
                "type": "string"
            },
            "ItemPizzaPrice": {
                "description": "",
                "required": [
                    "variationSize",
                    "price"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "",
                        "type": "integer"
                    },
                    "price": {
                        "description": "",
                        "type": "number"
                    },
                    "variationSize": {
                        "$ref": "#/components/schemas/VariationSize",
                        "description": ""
                    }
                }
            },
            "VariationProduct": {
                "description": "",
                "required": [
                    "name",
                    "extra",
                    "enabled"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Unique identifier",
                        "type": "integer"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "description": {
                        "description": "",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "",
                        "type": "boolean"
                    },
                    "order": {
                        "description": "",
                        "type": "integer"
                    }
                }
            },
            "ItemPizza": {
                "description": "",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Item"
                    }
                ],
                "properties": {
                    "prices": {
                        "description": "",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ItemPizzaPrice"
                        }
                    },
                    "doughs": {
                        "description": "",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariationDough"
                        },
                        "readOnly": true
                    },
                    "sizes": {
                        "description": "",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariationSize"
                        },
                        "readOnly": true
                    },
                    "toppingExtras": {
                        "description": "",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ToppingExtra"
                        },
                        "readOnly": true
                    }
                }
            },
            "ItemProductPrice": {
                "description": "",
                "required": [
                    "price",
                    "variation"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "",
                        "type": "integer"
                    },
                    "variation": {
                        "$ref": "#/components/schemas/VariationProduct",
                        "description": ""
                    },
                    "price": {
                        "description": "",
                        "type": "number"
                    }
                }
            },
            "ItemProduct": {
                "description": "",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Item"
                    }
                ],
                "properties": {
                    "prices": {
                        "description": "",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ItemProductPrice"
                        }
                    }
                }
            },
            "DashBoardPizzas": {
                "description": "",
                "required": [
                    "totalEnable",
                    "totalCategoriesEnable"
                ],
                "type": "object",
                "properties": {
                    "totalEnable": {
                        "description": "Total of `ItemPizza` enabled.",
                        "type": "integer"
                    },
                    "totalCategoriesEnable": {
                        "description": "Total of pizza `Category` enabled.",
                        "type": "integer"
                    }
                }
            },
            "OrderState": {
                "description": "",
                "enum": [
                    "PENDING",
                    "PROCESSING",
                    "COMPLETED",
                    "CANCELLED",
                    "FAILED",
                    "REFUNDED"
                ],
                "type": "string"
            },
            "OrderLine": {
                "description": "",
                "required": [
                    "item",
                    "quantity",
                    "total"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "",
                        "type": "integer"
                    },
                    "item": {
                        "$ref": "#/components/schemas/Item",
                        "description": ""
                    },
                    "productPrice": {
                        "$ref": "#/components/schemas/ItemProductPrice",
                        "description": ""
                    },
                    "pizzaPrice": {
                        "$ref": "#/components/schemas/ItemPizzaPrice",
                        "description": ""
                    },
                    "pizzaDough": {
                        "$ref": "#/components/schemas/VariationDough",
                        "description": ""
                    },
                    "pizzaToppingExtras": {
                        "description": "",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ToppingExtra"
                        }
                    },
                    "quantity": {
                        "description": "",
                        "type": "integer"
                    },
                    "customerNote": {
                        "description": "",
                        "type": "string"
                    },
                    "total": {
                        "description": "",
                        "type": "number"
                    }
                }
            },
            "Settings": {
                "description": "",
                "required": [
                    "currencySymbol",
                    "currencyDecimals",
                    "minOrderRequestMinutes",
                    "processingOrdersMinutesPartition"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Unique identifier",
                        "type": "integer"
                    },
                    "currencySymbol": {
                        "description": "Currency symbol",
                        "maxLength": 5,
                        "minLength": 1,
                        "type": "string"
                    },
                    "currencyDecimals": {
                        "description": "Number of decimals used for currency",
                        "maximum": 5,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "minOrderRequestMinutes": {
                        "description": "Minimum time in minutes to request the order",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "processingOrdersMinutesPartition": {
                        "description": "",
                        "type": "integer"
                    }
                },
                "example": {
                    "id": 1,
                    "currencySymbol": "‚Ç¨",
                    "currencyDecimals": 2,
                    "minOrderRequestMinutes": 45,
                    "processingOrdersMinutesPartition": 15
                }
            },
            "Order": {
                "description": "",
                "required": [
                    "dateCreation",
                    "customer",
                    "state",
                    "shippingMethod",
                    "dateRequest",
                    "shippingType"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "",
                        "type": "integer"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/User",
                        "description": ""
                    },
                    "state": {
                        "$ref": "#/components/schemas/OrderState",
                        "description": ""
                    },
                    "shippingMethod": {
                        "$ref": "#/components/schemas/ShippingMethod",
                        "description": ""
                    },
                    "transactionId": {
                        "description": "",
                        "type": "string"
                    },
                    "customerNote": {
                        "description": "",
                        "type": "string"
                    },
                    "backofficeNote": {
                        "description": "",
                        "type": "string"
                    },
                    "dateRequest": {
                        "format": "date-time",
                        "description": "",
                        "type": "string"
                    },
                    "dateCreation": {
                        "format": "date-time",
                        "description": "",
                        "type": "string"
                    },
                    "dateRequestConfirmed": {
                        "format": "date-time",
                        "description": "",
                        "type": "string"
                    },
                    "total": {
                        "description": "",
                        "type": "number"
                    },
                    "deliveryAddress": {
                        "$ref": "#/components/schemas/Address",
                        "description": ""
                    },
                    "shippingType": {
                        "$ref": "#/components/schemas/ShippingType",
                        "description": ""
                    }
                }
            },
            "OrderDetails": {
                "description": "",
                "required": [
                    "lines",
                    "branch"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Order"
                    }
                ],
                "properties": {
                    "branch": {
                        "$ref": "#/components/schemas/Branch",
                        "description": ""
                    },
                    "lines": {
                        "description": "",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderLine"
                        }
                    }
                }
            },
            "OrderRequest": {
                "description": "",
                "required": [
                    "dateCreation",
                    "shippingMethodId",
                    "dateRequest",
                    "lines",
                    "shippingType"
                ],
                "type": "object",
                "properties": {
                    "transactionId": {
                        "description": "",
                        "type": "string"
                    },
                    "customerNote": {
                        "description": "",
                        "type": "string"
                    },
                    "backofficeNote": {
                        "description": "",
                        "type": "string"
                    },
                    "dateRequest": {
                        "format": "date-time",
                        "description": "",
                        "type": "string"
                    },
                    "dateCreation": {
                        "format": "date-time",
                        "description": "",
                        "type": "string"
                    },
                    "dateRequestConfirmed": {
                        "format": "date-time",
                        "description": "",
                        "type": "string"
                    },
                    "total": {
                        "description": "",
                        "type": "number"
                    },
                    "deliveryAddress": {
                        "$ref": "#/components/schemas/Address",
                        "description": ""
                    },
                    "shippingMethodId": {
                        "description": "",
                        "type": "integer"
                    },
                    "lines": {
                        "description": "",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderLineRequest"
                        }
                    },
                    "shippingType": {
                        "$ref": "#/components/schemas/ShippingType",
                        "description": ""
                    }
                }
            },
            "OrderLineRequest": {
                "description": "",
                "required": [
                    "itemId",
                    "quantity",
                    "total"
                ],
                "type": "object",
                "properties": {
                    "quantity": {
                        "description": "",
                        "type": "integer"
                    },
                    "customerNote": {
                        "description": "",
                        "type": "string"
                    },
                    "total": {
                        "description": "",
                        "type": "number"
                    },
                    "itemId": {
                        "description": "",
                        "type": "integer"
                    },
                    "pizzaDoughId": {
                        "description": "",
                        "type": "integer"
                    },
                    "pizzaPriceId": {
                        "description": "",
                        "type": "integer"
                    },
                    "pizzaToppingExtrasId": {
                        "description": "",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "productPriceId": {
                        "description": "",
                        "type": "integer"
                    }
                }
            },
            "ShippingType": {
                "description": "",
                "enum": [
                    "DELIVERY_TO_HOME",
                    "PICKUP_IN_STORE"
                ],
                "type": "string"
            },
            "ShippingMethod": {
                "description": "",
                "required": [
                    "title",
                    "type",
                    "enabled",
                    "shippingTypes"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Method ID",
                        "type": "integer"
                    },
                    "title": {
                        "description": "Shipping method title",
                        "type": "string"
                    },
                    "description": {
                        "description": "Shipping method description",
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ShippingMethodType",
                        "description": ""
                    },
                    "enabled": {
                        "description": "",
                        "type": "boolean"
                    },
                    "shippingTypes": {
                        "description": "",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ShippingType"
                        }
                    }
                },
                "example": {
                    "id": 1,
                    "title": "Cash on delivery",
                    "description": "Paying for goods when they are delivered.",
                    "type": "CASH_ON_DELIVERY",
                    "enabled": true
                }
            },
            "ShippingZone": {
                "description": "",
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the resource",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Shipping zone name",
                        "type": "string"
                    }
                },
                "example": {
                    "id": 0,
                    "name": "Zone 1"
                }
            },
            "OrderSearchParameters": {
                "description": "",
                "type": "object",
                "properties": {
                    "states": {
                        "description": "",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderState"
                        }
                    },
                    "branchId": {
                        "description": "",
                        "type": "integer"
                    }
                }
            },
            "OrderSearchResult": {
                "description": "",
                "required": [
                    "dateCreation",
                    "customerUserName",
                    "state",
                    "shippingMethod",
                    "dateRequest",
                    "shippingType",
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "",
                        "type": "integer"
                    },
                    "state": {
                        "$ref": "#/components/schemas/OrderState",
                        "description": ""
                    },
                    "shippingMethod": {
                        "description": "",
                        "type": "string"
                    },
                    "transactionId": {
                        "description": "",
                        "type": "string"
                    },
                    "customerNote": {
                        "description": "",
                        "type": "string"
                    },
                    "backofficeNote": {
                        "description": "",
                        "type": "string"
                    },
                    "dateRequest": {
                        "format": "date-time",
                        "description": "",
                        "type": "string"
                    },
                    "dateCreation": {
                        "format": "date-time",
                        "description": "",
                        "type": "string"
                    },
                    "dateRequestConfirmed": {
                        "format": "date-time",
                        "description": "",
                        "type": "string"
                    },
                    "total": {
                        "description": "",
                        "type": "number"
                    },
                    "shippingType": {
                        "$ref": "#/components/schemas/ShippingType",
                        "description": ""
                    },
                    "customerUserName": {
                        "description": "",
                        "type": "string"
                    },
                    "deliveryAddressNumber": {
                        "description": "",
                        "type": "string"
                    },
                    "deliveryAddressStreet": {
                        "description": "",
                        "type": "string"
                    },
                    "deliveryAddressPlace": {
                        "description": "",
                        "type": "string"
                    },
                    "deliveryAddressPostalCode": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "SocialTypeEnum": {
                "description": "",
                "enum": [
                    "NONE",
                    "GOOGLE",
                    "FACEBOOK"
                ],
                "type": "string"
            },
            "UserSocialLogin": {
                "description": "",
                "required": [
                    "token",
                    "userId",
                    "socialType"
                ],
                "type": "object",
                "properties": {
                    "locale": {
                        "description": "",
                        "type": "string"
                    },
                    "userId": {
                        "description": "",
                        "type": "string"
                    },
                    "token": {
                        "description": "",
                        "type": "string"
                    },
                    "socialType": {
                        "$ref": "#/components/schemas/SocialTypeEnum",
                        "description": ""
                    }
                }
            }
        },
        "securitySchemes": {
            "BearerAuth": {
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "type": "http"
            }
        }
    },
    "security": [
        {
            "BearerAuth": [
            ]
        }
    ]
}